################################################################################
# For help, see https://rics.readthedocs.io                                    #
################################################################################
[translator]
fmt = "{id}:{name}[ {last_name}]"

# ------------------------------------------------------------------------------
# Name-to-source mapping configuration. Binds names to source, eg 'cute_animals'
# -> 'my_database.animals'. Overrides take precedence over scoring logic.
[translator.mapping]
unmapped_values_action = "raise"
score_function = "like_database_table"  # We don't need any kwargs for this function; no need to use a section

[[translator.mapping.filter_functions]]
function = "require_regex_match"
regex = ".*_id$"
where = "name"

################################################################################
# Fetching configuration.
################################################################################
[fetching.SqlFetcher]
connection_string = "postgresql+pg8000://postgres@localhost:5001/dvdrental"

# ------------------------------------------------------------------------------
# Placeholder mapping configuration. Binds actual names in sources (such as
# column names in an SQL table) to wanted names, eg id = 'animal_id'.
[fetching.mapping]
unmapped_values_action = "ignore"

[[fetching.mapping.filter_functions]]
function = "banned_substring"
substrings = ["p2007"]
where = "context"

[[fetching.mapping.score_function_heuristics]]
function = "value_fstring_alias"
fstring = "first_{value}"
[[fetching.mapping.score_function_heuristics]]
function = "value_fstring_alias"
fstring = "{context}_{value}"

[fetching.mapping.overrides.addess]
code = "postal_code"
[fetching.mapping.overrides.film]
name = "title"
